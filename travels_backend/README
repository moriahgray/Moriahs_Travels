# **Backend - Moriah's Travels**

## **Overview**
The backend for Moriah's Travels is built with **Rust** using the **Actix Web framework**. It provides a REST API for user authentication, place management, and database interactions using **MySQL/MariaDB** with **Diesel ORM**.

---

## **Setup Instructions**
### **Prerequisites**
- Install **Rust** and **Cargo**: [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install)
- Install **MySQL/MariaDB**: Ensure you have a running instance.

### **Installation**
1. Clone the repository:
   ```sh
   git clone https://github.com/moriahgray/Moriahs_Travels.git
   cd moriahs-travels/backend
   ```

2. Set up environment variables by creating a `.env` file:
   ```sh
   DATABASE_URL=mysql://username:password@localhost/moriah_travels
   JWT_SECRET=your_secret_key
   ```

3. Install dependencies:
   ```sh
   cargo install diesel_cli --no-default-features --features mysql
   cargo build
   ```

4. Run database migrations:
   ```sh
   diesel setup
   diesel migration run
   ```

5. Start the server:
   ```sh
   cargo run
   ```

---

## **API Endpoints**
### **Authentication**
- `POST /auth/register` → User registration
- `POST /auth/login` → User login (returns JWT token)
- `GET /auth/verify` → Token verification

### **Places**
- `GET /places` → Fetch all places
- `POST /places` → Add a new place
- `DELETE /places/{id}` → Delete a place

---

## **Tech Stack**
- **Rust**
- **Actix Web**
- **Diesel ORM**
- **JWT Authentication**
- **MySQL/MariaDB**

---

## **Running Tests**
Run tests using:
```sh
cargo test
```

---

## **Troubleshooting**
- If `diesel setup` fails, ensure MySQL is running and accessible.
- If authentication fails, verify your `SECRET_KEY` and database settings.

For more details, refer to the backend source files.